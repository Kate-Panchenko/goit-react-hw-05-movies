{"version":3,"file":"static/js/241.b9074204.chunk.js","mappings":"iZAEaA,EAAOC,EAAAA,GAAAA,GAAH,8HASJC,EAAOD,EAAAA,GAAAA,GAAH,2DAIJE,EAAQF,EAAAA,GAAAA,IAAH,uNAWLG,EAAQH,EAAAA,GAAAA,EAAH,6HACP,SAAAI,GAAK,OAAIA,EAAMC,MAAMC,KAAhB,IAOHC,EAAWP,EAAAA,GAAAA,GAAH,2DAIRQ,EAAWR,EAAAA,GAAAA,IAAH,iGAIV,SAAAI,GAAK,OAAIA,EAAMC,MAAMC,KAAhB,IAGHG,EAAcT,EAAAA,GAAAA,GAAH,mFAMXU,EAASV,EAAAA,GAAAA,GAAH,2IAIU,SAAAI,GAAK,OAAIA,EAAMC,MAAMC,KAAhB,IAIrBK,EAAaX,EAAAA,GAAAA,KAAH,4C,wMCxDVY,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,SAAC,KAAD,UACGA,EAAKC,OAAS,GACXD,EAAKE,MAAM,EAAG,IAAIC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAC5C,OACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,gBACEC,IACED,EACI,kCAAoCA,EACpCE,EAENC,IAAKJ,KAEP,uCAAeD,MACf,kCAAUC,SAXCF,EAelB,IACDJ,EAAKG,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAC/B,OACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,gBACEC,IAAK,kCAAoCD,EACzCG,IAAKJ,KAEP,uCAAeD,MACf,kCAAUC,SAPCF,EAWlB,KAGV,ECFD,EA/Ba,WACT,IAAQA,GAAOO,EAAAA,EAAAA,MAAPP,GACR,GAAwBQ,EAAAA,EAAAA,UAAS,IAAjC,eAAOZ,EAAP,KAAaa,EAAb,KACA,GAAgCD,EAAAA,EAAAA,WAAS,GAAzC,eAAOE,EAAP,KAAiBC,EAAjB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,8GAE2BC,EAAAA,EAAAA,GAAUb,GAFrC,QAEcJ,EAFd,QAGiBC,SACLY,GAAQ,OAAIb,IACZe,GAAY,IALxB,gDAQIG,EAAAA,GAAAA,MAAY,mCARhB,0DADY,uBAAC,WAAD,wBAYZC,EACH,GAAE,CAACf,IAEAU,GAEI,8BACI,SAACf,EAAD,CAAUC,KAAMA,OAIjB,SAAC,KAAD,oDAEd,C","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/Cast.js","pages/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n`;\n\nexport const Item = styled.li`\n  width: calc((100% - 32px) / 3);\n`;\n\nexport const Image = styled.img`\n  margin-bottom: 6px;\n  width: 100%;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n`;\n\nexport const Title = styled.p`\n  color: ${props => props.theme.black};\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n`;\n\nexport const CastItem = styled.li`\n  width: calc((100% - 80px) / 5);\n`;\n\nexport const CastInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  color: ${props => props.theme.black};\n`;\n\nexport const ReviewsInfo = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const Review = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  border-bottom: 1px solid ${props => props.theme.black};\n  padding-bottom: 8px;\n`;\n\nexport const ReviewInfo = styled.span`\n  font-weight: 400;\n`;\n","import { List, CastItem, CastInfo } from './MoviesList.styled';\nimport placeholder from '../../images/placeholder.webp';\n\nexport const CastList = ({ cast }) => {\n  return (\n    <List>\n      {cast.length > 15\n        ? cast.slice(0, 15).map(({ id, character, name, profile_path }) => {\n            return (\n              <CastItem key={id}>\n                <CastInfo>\n                  <img\n                    src={\n                      profile_path\n                        ? 'https://image.tmdb.org/t/p/w500' + profile_path\n                        : placeholder\n                    }\n                    alt={name}\n                  />\n                  <p>Character: {character}</p>\n                  <p>Name: {name}</p>\n                </CastInfo>\n              </CastItem>\n            );\n          })\n        : cast.map(({ id, character, name, profile_path }) => {\n            return (\n              <CastItem key={id}>\n                <CastInfo>\n                  <img\n                    src={'https://image.tmdb.org/t/p/w500' + profile_path}\n                    alt={name}\n                  />\n                  <p>Character: {character}</p>\n                  <p>Name: {name}</p>\n                </CastInfo>\n              </CastItem>\n            );\n          })}\n    </List>\n  );\n};\n","import { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { fetchCast } from \"services/getMovies\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { CastList } from \"components/MoviesList/Cast\";\nimport { Title } from \"components/MoviesList/MoviesList.styled\";\n\nconst Cast = () => {\n    const { id } = useParams();\n    const [cast, setCast] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        async function getCast() {\n            try {\n                const cast = await fetchCast(id);\n                if (cast.length) {\n                    setCast([...cast]);\n                    setIsLoaded(true);\n                }\n        } catch (error) {\n            toast.error('We can`t find cast of this film');\n        }\n        }\n        getCast();\n    }, [id])\n    \n    if (isLoaded) {\n        return (\n            <section>\n                <CastList cast={cast} />\n            </section>\n        )\n    } else {\n        return(<Title>Sorry, there is no cast for this movie</Title>)\n    }\n}\n\nexport default Cast;\n\n"],"names":["List","styled","Item","Image","Title","props","theme","black","CastItem","CastInfo","ReviewsInfo","Review","ReviewInfo","CastList","cast","length","slice","map","id","character","name","profile_path","src","placeholder","alt","useParams","useState","setCast","isLoaded","setIsLoaded","useEffect","fetchCast","toast","getCast"],"sourceRoot":""}